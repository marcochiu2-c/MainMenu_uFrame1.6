// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.IOC;
using uFrame.Kernel;
using uFrame.MVVM;


public class MainMenuSystemLoaderBase : uFrame.Kernel.SystemLoader {
    
    private MainMenuRootViewModel _MainMenuRoot;
    
    private MainMenuRootController _MainMenuRootController;
    
    private SubScreenController _SubScreenController;
    
    private LoginScreenController _LoginScreenController;
    
    private SettingsScreenController _SettingsScreenController;
    
    private LevelSelectScreenController _LevelSelectScreenController;
    
    private MenuScreenController _MenuScreenController;
    
    private NoticeScreenController _NoticeScreenController;
    
    private SampleScreenController _SampleScreenController;
    
    private CardScreenController _CardScreenController;
    
    private SetBattleScreenController _SetBattleScreenController;
    
    private CharPageScreenController _CharPageScreenController;
    
    private ConferenceScreenController _ConferenceScreenController;
    
    private ParallelScreenController _ParallelScreenController;
    
    private CompanionScreenController _CompanionScreenController;
    
    private TechnologyTreeScreenController _TechnologyTreeScreenController;
    
    private StorageScreenController _StorageScreenController;
    
    private ShopScreenController _ShopScreenController;
    
    private SchoolFieldScreenController _SchoolFieldScreenController;
    
    private ArtisanScreenController _ArtisanScreenController;
    
    private TrainScreenController _TrainScreenController;
    
    private AcademyScreenController _AcademyScreenController;
    
    [uFrame.IOC.InjectAttribute("MainMenuRoot")]
    public virtual MainMenuRootViewModel MainMenuRoot {
        get {
            if (this._MainMenuRoot == null) {
                this._MainMenuRoot = this.CreateViewModel<MainMenuRootViewModel>( "MainMenuRoot");
            }
            return _MainMenuRoot;
        }
        set {
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual MainMenuRootController MainMenuRootController {
        get {
            if (_MainMenuRootController==null) {
                _MainMenuRootController = Container.CreateInstance(typeof(MainMenuRootController)) as MainMenuRootController;;
            }
            return _MainMenuRootController;
        }
        set {
            _MainMenuRootController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual SubScreenController SubScreenController {
        get {
            if (_SubScreenController==null) {
                _SubScreenController = Container.CreateInstance(typeof(SubScreenController)) as SubScreenController;;
            }
            return _SubScreenController;
        }
        set {
            _SubScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual LoginScreenController LoginScreenController {
        get {
            if (_LoginScreenController==null) {
                _LoginScreenController = Container.CreateInstance(typeof(LoginScreenController)) as LoginScreenController;;
            }
            return _LoginScreenController;
        }
        set {
            _LoginScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual SettingsScreenController SettingsScreenController {
        get {
            if (_SettingsScreenController==null) {
                _SettingsScreenController = Container.CreateInstance(typeof(SettingsScreenController)) as SettingsScreenController;;
            }
            return _SettingsScreenController;
        }
        set {
            _SettingsScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual LevelSelectScreenController LevelSelectScreenController {
        get {
            if (_LevelSelectScreenController==null) {
                _LevelSelectScreenController = Container.CreateInstance(typeof(LevelSelectScreenController)) as LevelSelectScreenController;;
            }
            return _LevelSelectScreenController;
        }
        set {
            _LevelSelectScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual MenuScreenController MenuScreenController {
        get {
            if (_MenuScreenController==null) {
                _MenuScreenController = Container.CreateInstance(typeof(MenuScreenController)) as MenuScreenController;;
            }
            return _MenuScreenController;
        }
        set {
            _MenuScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual NoticeScreenController NoticeScreenController {
        get {
            if (_NoticeScreenController==null) {
                _NoticeScreenController = Container.CreateInstance(typeof(NoticeScreenController)) as NoticeScreenController;;
            }
            return _NoticeScreenController;
        }
        set {
            _NoticeScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual SampleScreenController SampleScreenController {
        get {
            if (_SampleScreenController==null) {
                _SampleScreenController = Container.CreateInstance(typeof(SampleScreenController)) as SampleScreenController;;
            }
            return _SampleScreenController;
        }
        set {
            _SampleScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual CardScreenController CardScreenController {
        get {
            if (_CardScreenController==null) {
                _CardScreenController = Container.CreateInstance(typeof(CardScreenController)) as CardScreenController;;
            }
            return _CardScreenController;
        }
        set {
            _CardScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual SetBattleScreenController SetBattleScreenController {
        get {
            if (_SetBattleScreenController==null) {
                _SetBattleScreenController = Container.CreateInstance(typeof(SetBattleScreenController)) as SetBattleScreenController;;
            }
            return _SetBattleScreenController;
        }
        set {
            _SetBattleScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual CharPageScreenController CharPageScreenController {
        get {
            if (_CharPageScreenController==null) {
                _CharPageScreenController = Container.CreateInstance(typeof(CharPageScreenController)) as CharPageScreenController;;
            }
            return _CharPageScreenController;
        }
        set {
            _CharPageScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual ConferenceScreenController ConferenceScreenController {
        get {
            if (_ConferenceScreenController==null) {
                _ConferenceScreenController = Container.CreateInstance(typeof(ConferenceScreenController)) as ConferenceScreenController;;
            }
            return _ConferenceScreenController;
        }
        set {
            _ConferenceScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual ParallelScreenController ParallelScreenController {
        get {
            if (_ParallelScreenController==null) {
                _ParallelScreenController = Container.CreateInstance(typeof(ParallelScreenController)) as ParallelScreenController;;
            }
            return _ParallelScreenController;
        }
        set {
            _ParallelScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual CompanionScreenController CompanionScreenController {
        get {
            if (_CompanionScreenController==null) {
                _CompanionScreenController = Container.CreateInstance(typeof(CompanionScreenController)) as CompanionScreenController;;
            }
            return _CompanionScreenController;
        }
        set {
            _CompanionScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual TechnologyTreeScreenController TechnologyTreeScreenController {
        get {
            if (_TechnologyTreeScreenController==null) {
                _TechnologyTreeScreenController = Container.CreateInstance(typeof(TechnologyTreeScreenController)) as TechnologyTreeScreenController;;
            }
            return _TechnologyTreeScreenController;
        }
        set {
            _TechnologyTreeScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual StorageScreenController StorageScreenController {
        get {
            if (_StorageScreenController==null) {
                _StorageScreenController = Container.CreateInstance(typeof(StorageScreenController)) as StorageScreenController;;
            }
            return _StorageScreenController;
        }
        set {
            _StorageScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual ShopScreenController ShopScreenController {
        get {
            if (_ShopScreenController==null) {
                _ShopScreenController = Container.CreateInstance(typeof(ShopScreenController)) as ShopScreenController;;
            }
            return _ShopScreenController;
        }
        set {
            _ShopScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual SchoolFieldScreenController SchoolFieldScreenController {
        get {
            if (_SchoolFieldScreenController==null) {
                _SchoolFieldScreenController = Container.CreateInstance(typeof(SchoolFieldScreenController)) as SchoolFieldScreenController;;
            }
            return _SchoolFieldScreenController;
        }
        set {
            _SchoolFieldScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual ArtisanScreenController ArtisanScreenController {
        get {
            if (_ArtisanScreenController==null) {
                _ArtisanScreenController = Container.CreateInstance(typeof(ArtisanScreenController)) as ArtisanScreenController;;
            }
            return _ArtisanScreenController;
        }
        set {
            _ArtisanScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual TrainScreenController TrainScreenController {
        get {
            if (_TrainScreenController==null) {
                _TrainScreenController = Container.CreateInstance(typeof(TrainScreenController)) as TrainScreenController;;
            }
            return _TrainScreenController;
        }
        set {
            _TrainScreenController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual AcademyScreenController AcademyScreenController {
        get {
            if (_AcademyScreenController==null) {
                _AcademyScreenController = Container.CreateInstance(typeof(AcademyScreenController)) as AcademyScreenController;;
            }
            return _AcademyScreenController;
        }
        set {
            _AcademyScreenController = value;
        }
    }
    
    public override void Load() {
        Container.RegisterViewModelManager<MainMenuRootViewModel>(new ViewModelManager<MainMenuRootViewModel>());
        Container.RegisterController<MainMenuRootController>(MainMenuRootController);
        Container.RegisterViewModelManager<SubScreenViewModel>(new ViewModelManager<SubScreenViewModel>());
        Container.RegisterController<SubScreenController>(SubScreenController);
        Container.RegisterViewModelManager<LoginScreenViewModel>(new ViewModelManager<LoginScreenViewModel>());
        Container.RegisterController<LoginScreenController>(LoginScreenController);
        Container.RegisterViewModelManager<SettingsScreenViewModel>(new ViewModelManager<SettingsScreenViewModel>());
        Container.RegisterController<SettingsScreenController>(SettingsScreenController);
        Container.RegisterViewModelManager<LevelSelectScreenViewModel>(new ViewModelManager<LevelSelectScreenViewModel>());
        Container.RegisterController<LevelSelectScreenController>(LevelSelectScreenController);
        Container.RegisterViewModelManager<MenuScreenViewModel>(new ViewModelManager<MenuScreenViewModel>());
        Container.RegisterController<MenuScreenController>(MenuScreenController);
        Container.RegisterViewModelManager<NoticeScreenViewModel>(new ViewModelManager<NoticeScreenViewModel>());
        Container.RegisterController<NoticeScreenController>(NoticeScreenController);
        Container.RegisterViewModelManager<SampleScreenViewModel>(new ViewModelManager<SampleScreenViewModel>());
        Container.RegisterController<SampleScreenController>(SampleScreenController);
        Container.RegisterViewModelManager<CardScreenViewModel>(new ViewModelManager<CardScreenViewModel>());
        Container.RegisterController<CardScreenController>(CardScreenController);
        Container.RegisterViewModelManager<SetBattleScreenViewModel>(new ViewModelManager<SetBattleScreenViewModel>());
        Container.RegisterController<SetBattleScreenController>(SetBattleScreenController);
        Container.RegisterViewModelManager<CharPageScreenViewModel>(new ViewModelManager<CharPageScreenViewModel>());
        Container.RegisterController<CharPageScreenController>(CharPageScreenController);
        Container.RegisterViewModelManager<ConferenceScreenViewModel>(new ViewModelManager<ConferenceScreenViewModel>());
        Container.RegisterController<ConferenceScreenController>(ConferenceScreenController);
        Container.RegisterViewModelManager<ParallelScreenViewModel>(new ViewModelManager<ParallelScreenViewModel>());
        Container.RegisterController<ParallelScreenController>(ParallelScreenController);
        Container.RegisterViewModelManager<CompanionScreenViewModel>(new ViewModelManager<CompanionScreenViewModel>());
        Container.RegisterController<CompanionScreenController>(CompanionScreenController);
        Container.RegisterViewModelManager<TechnologyTreeScreenViewModel>(new ViewModelManager<TechnologyTreeScreenViewModel>());
        Container.RegisterController<TechnologyTreeScreenController>(TechnologyTreeScreenController);
        Container.RegisterViewModelManager<StorageScreenViewModel>(new ViewModelManager<StorageScreenViewModel>());
        Container.RegisterController<StorageScreenController>(StorageScreenController);
        Container.RegisterViewModelManager<ShopScreenViewModel>(new ViewModelManager<ShopScreenViewModel>());
        Container.RegisterController<ShopScreenController>(ShopScreenController);
        Container.RegisterViewModelManager<SchoolFieldScreenViewModel>(new ViewModelManager<SchoolFieldScreenViewModel>());
        Container.RegisterController<SchoolFieldScreenController>(SchoolFieldScreenController);
        Container.RegisterViewModelManager<ArtisanScreenViewModel>(new ViewModelManager<ArtisanScreenViewModel>());
        Container.RegisterController<ArtisanScreenController>(ArtisanScreenController);
        Container.RegisterViewModelManager<TrainScreenViewModel>(new ViewModelManager<TrainScreenViewModel>());
        Container.RegisterController<TrainScreenController>(TrainScreenController);
        Container.RegisterViewModelManager<AcademyScreenViewModel>(new ViewModelManager<AcademyScreenViewModel>());
        Container.RegisterController<AcademyScreenController>(AcademyScreenController);
        Container.RegisterViewModel<MainMenuRootViewModel>(MainMenuRoot, "MainMenuRoot");
    }
}
