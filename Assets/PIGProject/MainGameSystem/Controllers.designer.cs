// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Serialization;
using uFrame.MVVM;
using uFrame.Kernel;
using uFrame.IOC;
using UniRx;


public class MainGameRootControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _MainGameRootViewModelManager;
    
    [uFrame.IOC.InjectAttribute("MainGameRoot")]
    public uFrame.MVVM.IViewModelManager MainGameRootViewModelManager {
        get {
            return _MainGameRootViewModelManager;
        }
        set {
            _MainGameRootViewModelManager = value;
        }
    }
    
    public IEnumerable<MainGameRootViewModel> MainGameRootViewModels {
        get {
            return MainGameRootViewModelManager.OfType<MainGameRootViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeMainGameRoot(((MainGameRootViewModel)(viewModel)));
    }
    
    public virtual MainGameRootViewModel CreateMainGameRoot() {
        return ((MainGameRootViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new MainGameRootViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeMainGameRoot(MainGameRootViewModel viewModel) {
        // This is called when a MainGameRootViewModel is created
        MainGameRootViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        MainGameRootViewModelManager.Remove(viewModel);
    }
}
