// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Services;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UniRx;
using UnityEngine;


public class MainGameRootViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public GameState _GameState;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _HexGridMatching;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SoldierCount;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _EnemyCount;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PlayerIQ;
    
    [UFToggleGroup("GameState")]
    [UnityEngine.HideInInspector()]
    public bool _BindGameState = true;
    
    [UFGroup("GameState")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_GameStateonlyWhenChanged")]
    protected bool _GameStateOnlyWhenChanged;
    
    public override string DefaultIdentifier {
        get {
            return "MainGameRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MainGameRootViewModel);
        }
    }
    
    public MainGameRootViewModel MainGameRoot {
        get {
            return (MainGameRootViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as MainGameRootViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var maingamerootview = ((MainGameRootViewModel)model);
        maingamerootview.GameState = this._GameState;
        maingamerootview.HexGridMatching = this._HexGridMatching;
        maingamerootview.SoldierCount = this._SoldierCount;
        maingamerootview.EnemyCount = this._EnemyCount;
        maingamerootview.PlayerIQ = this._PlayerIQ;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.MainGameRoot to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindGameState) {
            this.BindProperty(this.MainGameRoot.GameStateProperty, this.GameStateChanged, _GameStateOnlyWhenChanged);
        }
    }
    
    public virtual void GameStateChanged(GameState arg1) {
    }
    
    public virtual void ExecuteGoToMenu() {
        MainGameRoot.GoToMenu.OnNext(new GoToMenuCommand() { Sender = MainGameRoot });
    }
    
    public virtual void ExecutePlay() {
        MainGameRoot.Play.OnNext(new PlayCommand() { Sender = MainGameRoot });
    }
    
    public virtual void ExecuteGameOver() {
        MainGameRoot.GameOver.OnNext(new GameOverCommand() { Sender = MainGameRoot });
    }
    
    public virtual void ExecuteGoToMenu(GoToMenuCommand command) {
        command.Sender = MainGameRoot;
        MainGameRoot.GoToMenu.OnNext(command);
    }
    
    public virtual void ExecutePlay(PlayCommand command) {
        command.Sender = MainGameRoot;
        MainGameRoot.Play.OnNext(command);
    }
    
    public virtual void ExecuteGameOver(GameOverCommand command) {
        command.Sender = MainGameRoot;
        MainGameRoot.GameOver.OnNext(command);
    }
}

public class SoldierViewBase : EntityView {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public SoldierState _SoldierState;
    
    [UFToggleGroup("SoldierState")]
    [UnityEngine.HideInInspector()]
    public bool _BindSoldierState = true;
    
    [UFGroup("SoldierState")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_SoldierStateonlyWhenChanged")]
    protected bool _SoldierStateOnlyWhenChanged;
    
    [UFToggleGroup("Action")]
    [UnityEngine.HideInInspector()]
    public bool _BindAction = true;
    
    [UFGroup("Action")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_ActiononlyWhenChanged")]
    protected bool _ActionOnlyWhenChanged;
    
    public override string DefaultIdentifier {
        get {
            return "Soldier1";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SoldierViewModel);
        }
    }
    
    public SoldierViewModel Soldier {
        get {
            return (SoldierViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as SoldierViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var soldierview = ((SoldierViewModel)model);
        soldierview.SoldierState = this._SoldierState;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Soldier to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindSoldierState) {
            this.BindProperty(this.Soldier.SoldierStateProperty, this.SoldierStateChanged, _SoldierStateOnlyWhenChanged);
        }
        if (_BindAction) {
            this.BindProperty(this.Soldier.ActionProperty, this.ActionChanged, _ActionOnlyWhenChanged);
        }
    }
    
    public virtual void SoldierStateChanged(SoldierState arg1) {
    }
    
    public virtual void ActionChanged(ActionStyle arg1) {
    }
    
    public virtual void ExecuteChangeActionStyle() {
        Soldier.ChangeActionStyle.OnNext(new ChangeActionStyleCommand() { Sender = Soldier });
    }
    
    public virtual void ExecuteChangeActionStyle(ChangeActionStyleCommand command) {
        command.Sender = Soldier;
        Soldier.ChangeActionStyle.OnNext(command);
    }
}

public class EnemyViewBase : EntityView {
    
    public override string DefaultIdentifier {
        get {
            return "Enemy1";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(EnemyViewModel);
        }
    }
    
    public EnemyViewModel Enemy {
        get {
            return (EnemyViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as EnemyViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Enemy to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
}

public class EntityViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Health;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Max_Health;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _AttackSpeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public MoveStyle _Movement;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Power;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _isAttack;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ActionStyle _Action;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MAXROUNDS;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Physique;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HitPoint;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _WeaponProficieny;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Dodge;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Hurt;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Dead;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _InitialMorale;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Prestige;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _DEBUG;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _counter;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Counter;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _UpdatePerRound;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ElementsPerSecond;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _WarTimeLimitInSecond;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _starttime;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _TimeStarted;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _WeaponProficiency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _moraleStandard;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public uFrame.MVVM.ViewBase _Opponent;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public BattleState _BattleState;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public PlayList _PlayList;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Career _Career;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _Moving;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public SenseStyle _Sense;
    
    [UFToggleGroup("Health")]
    [UnityEngine.HideInInspector()]
    public bool _BindHealth = true;
    
    [UFGroup("Health")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_HealthonlyWhenChanged")]
    protected bool _HealthOnlyWhenChanged;
    
    [UFToggleGroup("BattleState")]
    [UnityEngine.HideInInspector()]
    public bool _BindBattleState = true;
    
    [UFGroup("BattleState")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_BattleStateonlyWhenChanged")]
    protected bool _BattleStateOnlyWhenChanged;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(EntityViewModel);
        }
    }
    
    public EntityViewModel Entity {
        get {
            return (EntityViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as EntityViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var entityview = ((EntityViewModel)model);
        entityview.Health = this._Health;
        entityview.Max_Health = this._Max_Health;
        entityview.AttackSpeed = this._AttackSpeed;
        entityview.Movement = this._Movement;
        entityview.Power = this._Power;
        entityview.isAttack = this._isAttack;
        entityview.Action = this._Action;
        entityview.MAXROUNDS = this._MAXROUNDS;
        entityview.Name = this._Name;
        entityview.Physique = this._Physique;
        entityview.HitPoint = this._HitPoint;
        entityview.WeaponProficieny = this._WeaponProficieny;
        entityview.Dodge = this._Dodge;
        entityview.Hurt = this._Hurt;
        entityview.Dead = this._Dead;
        entityview.InitialMorale = this._InitialMorale;
        entityview.Prestige = this._Prestige;
        entityview.DEBUG = this._DEBUG;
        entityview.counter = this._counter;
        entityview.Counter = this._Counter;
        entityview.UpdatePerRound = this._UpdatePerRound;
        entityview.ElementsPerSecond = this._ElementsPerSecond;
        entityview.WarTimeLimitInSecond = this._WarTimeLimitInSecond;
        entityview.starttime = this._starttime;
        entityview.TimeStarted = this._TimeStarted;
        entityview.WeaponProficiency = this._WeaponProficiency;
        entityview.moraleStandard = this._moraleStandard;
        entityview.Opponent = this._Opponent == null ? null :  ViewService.FetchViewModel(this._Opponent) as EntityViewModel;
        entityview.BattleState = this._BattleState;
        entityview.PlayList = this._PlayList;
        entityview.Career = this._Career;
        entityview.Moving = this._Moving;
        entityview.Sense = this._Sense;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Entity to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindHealth) {
            this.BindProperty(this.Entity.HealthProperty, this.HealthChanged, _HealthOnlyWhenChanged);
        }
        if (_BindBattleState) {
            this.BindProperty(this.Entity.BattleStateProperty, this.BattleStateChanged, _BattleStateOnlyWhenChanged);
        }
    }
    
    public virtual void HealthChanged(Single arg1) {
    }
    
    public virtual void BattleStateChanged(BattleState arg1) {
    }
    
    public virtual void ExecuteChangeBattleState() {
        Entity.ChangeBattleState.OnNext(new ChangeBattleStateCommand() { Sender = Entity });
    }
    
    public virtual void ExecuteChangeHealth() {
        Entity.ChangeHealth.OnNext(new ChangeHealthCommand() { Sender = Entity });
    }
    
    public virtual void ExecuteChangeBattleState(ChangeBattleStateCommand command) {
        command.Sender = Entity;
        Entity.ChangeBattleState.OnNext(command);
    }
    
    public virtual void ExecuteChangeHealth(ChangeHealthCommand command) {
        command.Sender = Entity;
        Entity.ChangeHealth.OnNext(command);
    }
}
