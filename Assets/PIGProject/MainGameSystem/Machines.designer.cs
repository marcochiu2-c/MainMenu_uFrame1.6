// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class PlayerStateMachine : Invert.StateMachine.StateMachine {
    
    private Invert.StateMachine.StateMachineTrigger _AfterMove;
    
    private Invert.StateMachine.StateMachineTrigger _AfterAttack;
    
    private ATTACK _ATTACK;
    
    private MOVE _MOVE;
    
    public PlayerStateMachine(uFrame.MVVM.ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public PlayerStateMachine() : 
            base(null, string.Empty) {
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.MOVE;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger AfterMove {
        get {
            if (this._AfterMove == null) {
                this._AfterMove = new StateMachineTrigger(this , "AfterMove");
            }
            return _AfterMove;
        }
        set {
            _AfterMove = value;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger AfterAttack {
        get {
            if (this._AfterAttack == null) {
                this._AfterAttack = new StateMachineTrigger(this , "AfterAttack");
            }
            return _AfterAttack;
        }
        set {
            _AfterAttack = value;
        }
    }
    
    public virtual ATTACK ATTACK {
        get {
            if (this._ATTACK == null) {
                this._ATTACK = new ATTACK();
            }
            return _ATTACK;
        }
        set {
            _ATTACK = value;
        }
    }
    
    public virtual MOVE MOVE {
        get {
            if (this._MOVE == null) {
                this._MOVE = new MOVE();
            }
            return _MOVE;
        }
        set {
            _MOVE = value;
        }
    }
    
    public override void Compose(System.Collections.Generic.List<Invert.StateMachine.State> states) {
        base.Compose(states);
        ATTACK.AfterAttack = new StateTransition("AfterAttack", ATTACK, MOVE);
        Transitions.Add(ATTACK.AfterAttack);
        ATTACK.AddTrigger(AfterAttack, ATTACK.AfterAttack);
        ATTACK.StateMachine = this;
        states.Add(ATTACK);
        MOVE.AfterMove = new StateTransition("AfterMove", MOVE, ATTACK);
        Transitions.Add(MOVE.AfterMove);
        MOVE.AddTrigger(AfterMove, MOVE.AfterMove);
        MOVE.StateMachine = this;
        states.Add(MOVE);
    }
}

public class ATTACK : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _AfterAttack;
    
    public Invert.StateMachine.StateTransition AfterAttack {
        get {
            return _AfterAttack;
        }
        set {
            _AfterAttack = value;
        }
    }
    
    public override string Name {
        get {
            return "ATTACK";
        }
    }
    
    public virtual void AfterAttackTransition() {
        this.Transition(this.AfterAttack);
    }
}

public class MOVE : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _AfterMove;
    
    public Invert.StateMachine.StateTransition AfterMove {
        get {
            return _AfterMove;
        }
        set {
            _AfterMove = value;
        }
    }
    
    public override string Name {
        get {
            return "MOVE";
        }
    }
    
    public virtual void AfterMoveTransition() {
        this.Transition(this.AfterMove);
    }
}
